bookstore{
  include "credit" 
  include "inventory"
  include "order"
  include "user"

  
  httpPort = 8080
  clusterPort = 2553

  akka {
    loglevel = INFO
    //loggers = ["akka.event.slf4j.Slf4jLogger"]   

    persistence{
      journal.plugin = "cassandra-journal"            
      snapshot-store.plugin = "cassandra-snapshot-store"
    }
            
    actor{
      provider = "akka.cluster.ClusterActorRefProvider"
      serializers{
        json = "com.packt.masteringakka.bookstore.common.JsonSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
      }
      serialization-bindings {
        "com.google.protobuf.Message" = proto
        "com.packt.masteringakka.bookstore.common.EntityFieldsObject" = json
      }      
    }

    remote {       
      netty.tcp {
        hostname = "127.0.0.1"
        port = ${bookstore.clusterPort}
      }
    }
    cluster {      
      seed-nodes = [
        "akka.tcp://BookstoreSystem@127.0.0.1:2553",
        "akka.tcp://BookstoreSystem@127.0.0.1:2554"
      ]
    }    
  }

  
  serviceBoots = ["Inventory", "Credit", "User", "Order"]

  maxShards = 60
  
  elasticsearch{
    host = "localhost"
    port = 9200
  }
  
  cassandra-journal{
    event-adapters{
      proto = "com.packt.masteringakka.bookstore.common.ProtobufDatamodelAdapter"
    }
    
    event-adapter-bindings{
      "com.packt.masteringakka.bookstore.common.EntityEvent" = proto
      "com.google.protobuf.Message" = proto
    }
  } 
}
