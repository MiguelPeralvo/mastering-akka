dockerIp="192.168.99.100"
dockerIp=${?DOCKER_HOST_IP}

cassandraPort=12345
cassandraPort=${?CASSANDRA_HOST_PORT}

inventory-management{
  ip = "127.0.0.1"
  ip = ${?INVENTORY_MANAGEMENT_BIND_IP}
  port = 8080
  port = ${?INVENTORY_MANAGEMENT_BIND_PORT}
}

akka {
  loglevel = INFO   
  loggers = ["akka.event.slf4j.Slf4jLogger"]   

  persistence{
    journal.plugin = "cassandra-journal"            
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
            
  actor{
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers{
      json = "com.packt.masteringakka.bookstore.common.JsonSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "com.google.protobuf.Message" = proto
      "com.packt.masteringakka.bookstore.common.EntityFieldsObject" = json
    }      
  }
  
  remote.netty.tcp {
    hostname = "127.0.0.1"
    port = 2552
  }
  
  cluster {
    seed-nodes = ["akka.tcp://BookstoreSystem@127.0.0.1:2552"]
  }  
}

maxShards = 60
  
elasticsearch{
  host = ${dockerIp}
  port = 12346
  port = ${ES_HOST_PORT}
}

cassandra-journal{
  contact-points = [${dockerIp}]
  port = ${cassandraPort}
  event-adapters{
    proto = "com.packt.masteringakka.bookstore.common.ProtobufDatamodelAdapter"
  }
    
  event-adapter-bindings{
    "com.packt.masteringakka.bookstore.common.EntityEvent" = proto
    "com.google.protobuf.Message" = proto
  }  
  
  tags = {
    book = 1
    bookcreated = 2
    inventoryadded = 2
    tagadded = 2
    tagremoved = 2
    inventoryallocated = 2
    inventorybackordered = 2
    bookdeleted = 2
  }
} 

cassandra-snapshot-store {
  contact-points = [${dockerIp}]
  port = ${cassandraPort} 
} 